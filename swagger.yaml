swagger: '2.0'
info:
  version: '0.0.1'
  title: Author Haven
# during dev, should point to your local machine
host: localhost:3000
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /:
    # binds a127 app logic to a route
    get:
      description: Returns Welcome to Author Haven
      responses:
        '200':
          description: Success
          schema:
            # a pointer to a definition
            type: object
            properties:
              Message:
                type: 'string'
                example: 'Welcome to Author Haven'
        '404':
          description: Route not found
          # responses may fall through to errors
  /api/users:
    # returns a jwt token after registration
    post:
      description: Returns a json web token after a Successfull registration
      parameters:
        - name: New user
          in: body
          required: true
          description: The User json You want to create
          schema:
            type: object
            properties:
              firtsname:
                type: 'string'
                example: 'Firtsname'
              lastname:
                type: 'string'
                example: 'Lastname'
              email:
                type: 'string'
                example: 'email@host.com'
              username:
                type: 'string'
                example: 'username'
              password:
                type: 'string'
                example: '!23Secret'
      responses:
        '201':
          description: created
          schema:
            type: object
            properties:
              user:
                type: 'object'
                properties:
                  firtsname:
                    type: 'string'
                    example: 'Firtsname'
                  lastname:
                    type: 'string'
                    example: 'Lastname'
                  email:
                    type: 'string'
                    example: 'email@host.com'
                  username:
                    type: 'string'
                    example: 'username'
                  bio:
                    type: 'string'
                    example: 'i like programming'
                  image:
                    type: 'string'
                    example: 'image1.png'

                  token:
                    type: 'string'
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXJuYW0yM2hpMjMxYXNmOSIsImVtYWlsIjoibWVAZ21haWwuY29zaGEiLCJmaXJzdG5hbWUiOiJGcmllZCIsImxhc3RuYW1lIjoiTWlrZWxyaCIsImlhdCI6MTU1NTA1OTc0NX0.NfmPq_sMaD9vmdA7VH0CV2ts_6_q4eql0TiqXQVoS0w'
        '400':
          description: Bad request
        default:
          description: Unexpected Error
  /api/users/login:
    # returns a jwt token after registration
    post:
      description: Returns a json web token after a Successfull registration
      parameters:
        - name: New user
          in: body
          required: true
          description: The User json You want to create
          schema:
            type: object
            properties:
              email:
                type: 'string'
                example: 'email@host.com'
              password:
                type: 'string'
                example: '!23Secret'
      responses:
        '200':
          description: Ok
          schema:
            type: object
            properties:
              user:
                type: 'object'
                properties:
                  firtsname:
                    type: 'string'
                    example: 'Firtsname'
                  lastname:
                    type: 'string'
                    example: 'Lastname'
                  email:
                    type: 'string'
                    example: 'email@host.com'
                  username:
                    type: 'string'
                    example: 'username'
                  bio:
                    type: 'string'
                    example: 'i like programming'
                  image:
                    type: 'string'
                    example: 'image1.png'

                  token:
                    type: 'string'
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXJuYW0yM2hpMjMxYXNmOSIsImVtYWlsIjoibWVAZ21haWwuY29zaGEiLCJmaXJzdG5hbWUiOiJGcmllZCIsImxhc3RuYW1lIjoiTWlrZWxyaCIsImlhdCI6MTU1NTA1OTc0NX0.NfmPq_sMaD9vmdA7VH0CV2ts_6_q4eql0TiqXQVoS0w'
        '400':
          description: Bad request
        default:
          description: Unexpected Error
  /api/auth/verify/{path}:
    # binds a127 app logic to a route
    get:
      description: Returns an object message
      produces:
        - application/json
      parameters:
        - in: path
          name: path
          description: Verification Hash
          required: true
          type: string
      responses:
        '200':
          description: Verified account successfully
          schema:
            # a pointer to a definition
            type: object
            properties:
              message:
                type: 'object'
                example: 'Account verified'
        '401':
          description: Verification token not found
  /api/auth/facebook:
    # social user login
    get:
      description: Returns user data from facebook
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              user:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                  bio:
                    type: string
                  token:
                    type: string
                  image:
                    type: string
        '404':
          description: Route not found
  /api/auth/google:
    # social user login
    get:
      description: Returns user data from google
      responses:
        '200':
          description: Success
          schema:
            # a pointer to a definition
            type: object
            properties:
              error:
                type: 'object'
                example: 'Verification token not found'
  /api/auth/twitter:
    # binds a127 app logic to a route
    get:
      description: Login with Twitter
      responses:
        '200':
          description: Redirects to twitter
  /api/auth/twitter/callback:
    # binds a127 app logic to a route
    get:
      description: Login with Twitter Callback
      responses:
        '200':
          description: Returns an object with data from twitter
  /api/auth/github:
    # binds a127 app logic to a route
    get:
      description: Login with Github
      responses:
        '200':
          description: Redirects to Github
  /api/auth/github/callback:
    # binds a127 app logic to a route
    get:
      description: Login with Github Callback
      responses:
        '200':
          description: Returns an object with data from Github
  /api/articles/{articleSlug}/rate/{rating}:
    # binds a127 app logic to a route
    post:
      description: Returns an object with user who rated, title of a rated article, and rating of an article
      produces:
        - application/json
      parameters:
        - in: path
          name: articleSlug
          description: it's a slug of an already existing article
          required: true
          type: string
        - in: path
          name: rating
          description: it's a rating of an article.
          required: true
          type: string
        - name: authorization
          in: header
          type: string
          required: true

      responses:
        '201':
          description: Article Rated
          schema:
            # a pointer to a definition
            type: object
            properties:
              status:
                type: 'integer'
              id:
                type: 'integer'
              user:
                type: object
                properties:
                  id:
                    type: 'integer'
                  username:
                    type: 'string'
              article:
                type: object
                properties:
                  title:
                    type: 'string'
                  slug:
                    type: 'string'
              rating:
                type: 'string'
        '404':
          description: Verify if a user exists
          schema:
            # a pointer to a definition
            type: object
            properties:
              status:
                type: 'integer'
              error:
                type: 'string'
        '400':
          description: Check if rating is valid
          schema:
            type: object
            properties:
              status:
                type: 'integer'
              error:
                type: 'string'
        '200':
          description: Update Rating of an article
          schema:
            # a pointer to a definition
            type: object
            properties:
              status:
                type: 'integer'
              id:
                type: 'integer'
              user:
                type: object
                properties:
                  id:
                    type: 'integer'
                  username:
                    type: 'string'
              article:
                type: object
                properties:
                  title:
                    type: 'string'
                  slug:
                    type: 'string'
              rating:
                type: 'string'
              previousRating:
                type: 'string'
        '403':
          description: Do not allow to rate an article more than once
          schema:
            type: object
            properties:
              status:
                type: 'integer'
              error:
                type: 'string'
