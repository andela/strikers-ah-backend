swagger: '2.0'
info:
  version: '0.0.1'
  title: Author Haven
# during dev, should point to your local machine
host: localhost:3000
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /:
    # binds a127 app logic to a route
    get:
      description: Returns Welcome to Author Haven
      responses:
        '200':
          description: Success
          schema:
            # a pointer to a definition
            type: object
            properties:
              Message:
                type: 'String'
                example: 'Welcome to Author Haven'
          '404':
            description: Route not found
          # responses may fall through to errors
          default:
            description: Unexpected Error,
  /api/users:
    # returns a jwt token after registration
   post:
    description: Returns a json web token after a Successfull registration
    parameters:
    - name: New user
      in: body
      required: true
      description: The User json You want to create
      schema:
        type: object
        properties:
         firtsname:
          type: 'String'
          example: 'Firtsname'
         lastname:
          type: 'String'
          example: 'Lastname'
         email:
          type: 'String'
          example: 'email@host.com'
         username:
          type: 'String'
          example: 'username'
         password:
          type: 'String'
          example: '!23Secret'
    responses:
      '201':
        description: created
        schema:
          type: object
          properties:
            user:
              type: 'object'
              properties:
                firtsname:
                  type: 'String'
                  example: 'Firtsname'
                lastname:
                  type: 'String'
                  example: 'Lastname'
                email:
                  type: 'String'
                  example: 'email@host.com'
                username:
                  type: 'String'
                  example: 'username'
                bio:
                 type: 'String'
                 example: 'i like programming'
                image:
                 type: 'String'
                 example: 'image1.png'

                token:
                 type: 'String'
                 example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXJuYW0yM2hpMjMxYXNmOSIsImVtYWlsIjoibWVAZ21haWwuY29zaGEiLCJmaXJzdG5hbWUiOiJGcmllZCIsImxhc3RuYW1lIjoiTWlrZWxyaCIsImlhdCI6MTU1NTA1OTc0NX0.NfmPq_sMaD9vmdA7VH0CV2ts_6_q4eql0TiqXQVoS0w'
      '400':
        description: Bad request
      default:
        description: Unexpected Error
  /api/users/login:
  # returns a jwt token after registration
   post:
    description: Returns a json web token after a Successfull registration
    parameters:
    - name: New user
      in: body
      required: true
      description: The User json You want to create
      schema:
        type: object
        properties:
         email:
          type: 'String'
          example: 'email@host.com'
         password:
          type: 'String'
          example: '!23Secret'
    responses:
      '200':
        description: Ok
        schema:
          type: object
          properties:
            user:
              type: 'object'
              properties:
                firtsname:
                 type: 'String'
                 example: 'Firtsname'
                lastname:
                 type: 'String'
                 example: 'Lastname'
                email:
                 type: 'String'
                 example: 'email@host.com'
                username:
                 type: 'String'
                 example: 'username'
                bio:
                 type: 'String'
                 example: 'i like programming'
                image:
                 type: 'String'
                 example: 'image1.png'

                token:
                  type: 'String'
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXJuYW0yM2hpMjMxYXNmOSIsImVtYWlsIjoibWVAZ21haWwuY29zaGEiLCJmaXJzdG5hbWUiOiJGcmllZCIsImxhc3RuYW1lIjoiTWlrZWxyaCIsImlhdCI6MTU1NTA1OTc0NX0.NfmPq_sMaD9vmdA7VH0CV2ts_6_q4eql0TiqXQVoS0w'
      '400':
        description: Bad request
      default:
        description: Unexpected Error
  /api/auth/verify/{path}:
    # binds a127 app logic to a route
    get:
      description: Returns an object message
      produces:
        - application/json
      parameters:
        - in: path
          name: hash
          description: Verification Hash
          required: true
          type: string
          example: 373b609f199159befdfsdsd79394df7cba76d9937824ad0b8b30228b6900878ac4832da0dff1682a48099b565dfs6d45
      responses:
        '200':
          description: Verified account successfully
          schema:
            # a pointer to a definition
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Account verified'
        '401':
          description: Verification token not found
  /api/auth/facebook:
    # social user login
    get:
      description: Returns user data from facebook
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              user:
                username: 'String'
                email: 'abc@XZY.com'
                bio: 'problem solver'
                token: '....'
                image: '....jpg'
        '404':
          description: Route not found
          default: Can't sign in
  /api/auth/google:
    # social user login
    get:
      description: Returns user data from google
      responses:
        '200':
          description: Success
          schema:
            # a pointer to a definition
            type: object
            properties:
              error:
                type: 'Object'
                example: 'Verification token not found'
  /api/auth/twitter:
    # binds a127 app logic to a route
    get:
      description: Login with Twitter
      responses:
        '200':
          description: Redirects to twitter
  /api/auth/twitter/callback:
    # binds a127 app logic to a route
    get:
      description: Login with Twitter Callback
      responses:
        '200':
          description: Returns an object with data from twitter
  /api/auth/github:
    # binds a127 app logic to a route
    get:
      description: Login with Github
      responses:
        '200':
          description: Redirects to Github
  /api/auth/github/callback:
    # binds a127 app logic to a route
    get:
      description: Login with Github Callback
      responses:
        '200':
           description: Returns an object with data from Github
           responses:
            schema:
              type: object
              properties:
                username: 'String'
                emial: 'abc@XZY.com'
                bio: 'problem solver'
                token: '....'
                image: '....jpg'
        '404':
          description: Route not found
            # responses may fall through to errors
  /api/auth/forgetpassword:
    # social user login
    post:
      description: Returns emailed link
      parameters:
        email: 'abc@XYZ.com'
      responses:
        '200':
          description: Success
          schema:
            # a pointer to a definition
            type: emails the link
            properties:
              user:
                message: 'String'
                emial: 'abc@XZY.com'
        '404':
          description: Email not found
          # responses may fall through to errors
          default:
            description: Can not found URL
  /api/auth/resetpassword:
    # social user login
    put:
      description: Returns 1 on success or 0
      responses:
          '201':
          description: Success
          schema:
            # a pointer to a definition
            type: object
            properties:
              user:
                username: 'String'
                emial: 'abc@XZY.com'
                bio: 'problem solver'
                token: '....'
                image: '....jpg'
          '400':
           description: invalid token
          # responses may fall through to errors
           '201':
            description: 1
          # responses may fall through to errors
          default:
            description: Can not found URL
  /api/auth/profile:
    # edit user profile
    post:
      description: Edit user profile
      parameters:
      - name: New user
        in: body
        description: The User json You want to create
        schema:
          type: object
          properties:
            firtsname:
              type: 'String'
              example: 'Firtsname'
            lastname:
              type: 'String'
              example: 'Lastname'
            email:
              type: 'String'
              example: 'email@host.com'
            username:
              type: 'String'
              example: 'username'
            password:
              type: 'String'
              example: '!23Secret'
      responses:
        '201':
          description: created
          schema:
            type: 'object'
            properties:
              firtsname:
                type: 'String'
                example: 'Firtsname'
              lastname:
                type: 'String'
                example: 'Lastname'
              email:
                type: 'String'
                example: 'email@host.com'
              username:
                type: 'String'
                example: 'username'
              bio:
                type: 'String'
                example: 'i like programming'
              image:
                type: 'String'
                example: 'image1.png'

