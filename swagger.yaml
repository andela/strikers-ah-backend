swagger: '2.0'
info:
  version: '0.0.1'
  title: Author Haven
# during dev, should point to your local machine
host: localhost:3000
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /:
    # binds a127 app logic to a route
    get:
      description: Returns Welcome to Author Haven
      responses:
        '200':
          description: Success
          schema:
            # a pointer to a definition
            type: object
            properties:
              Message:
                type: 'String'
                example: 'Welcome to Author Haven'
          '404':
            description: Route not found
          # responses may fall through to errors
          default:
            description: Unexpected Error,
  /api/users:
    # returns a jwt token after registration
   post:
    description: Returns a json web token after a Successfull registration
    parameters:
    - name: New user
      in: body
      required: true
      description: The User json You want to create
      schema:
        type: object
        properties:
         firtsname:
          type: 'String'
          example: 'Firtsname'
         lastname:
          type: 'String'
          example: 'Lastname'
         email:
          type: 'String'
          example: 'email@host.com'
         username:
          type: 'String'
          example: 'username'
         password:
          type: 'String'
          example: '!23Secret'
    responses:
      '201':
        description: created
        schema:
          type: object
          properties:
            user:
              type: 'object'
              properties:
                firtsname:
                  type: 'String'
                  example: 'Firtsname'
                lastname:
                  type: 'String'
                  example: 'Lastname'
                email:
                  type: 'String'
                  example: 'email@host.com'
                username:
                  type: 'String'
                  example: 'username'
                bio:
                 type: 'String'
                 example: 'i like programming'
                image:
                 type: 'String'
                 example: 'image1.png'

                token:
                 type: 'String'
                 example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXJuYW0yM2hpMjMxYXNmOSIsImVtYWlsIjoibWVAZ21haWwuY29zaGEiLCJmaXJzdG5hbWUiOiJGcmllZCIsImxhc3RuYW1lIjoiTWlrZWxyaCIsImlhdCI6MTU1NTA1OTc0NX0.NfmPq_sMaD9vmdA7VH0CV2ts_6_q4eql0TiqXQVoS0w'
      '400':
        description: Bad request
      default:
        description: Unexpected Error
  /api/users/login:
  # returns a jwt token after registration
   post:
    description: Returns a json web token after a Successfull registration
    parameters:
    - name: New user
      in: body
      required: true
      description: The User json You want to create
      schema:
        type: object
        properties:
         email:
          type: 'String'
          example: 'email@host.com'
         password:
          type: 'String'
          example: '!23Secret'
    responses:
      '200':
        description: Ok
        schema:
          type: object
          properties:
            user:
              type: 'object'
              properties:
                firtsname:
                 type: 'String'
                 example: 'Firtsname'
                lastname:
                 type: 'String'
                 example: 'Lastname'
                email:
                 type: 'String'
                 example: 'email@host.com'
                username:
                 type: 'String'
                 example: 'username'
                bio:
                 type: 'String'
                 example: 'i like programming'
                image:
                 type: 'String'
                 example: 'image1.png'

                token:
                  type: 'String'
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXJuYW0yM2hpMjMxYXNmOSIsImVtYWlsIjoibWVAZ21haWwuY29zaGEiLCJmaXJzdG5hbWUiOiJGcmllZCIsImxhc3RuYW1lIjoiTWlrZWxyaCIsImlhdCI6MTU1NTA1OTc0NX0.NfmPq_sMaD9vmdA7VH0CV2ts_6_q4eql0TiqXQVoS0w'
      '400':
        description: Bad request
      default:
        description: Unexpected Error
  /api/auth/verify/{path}:
    # binds a127 app logic to a route
    get:
      description: Returns an object message
      produces:
        - application/json
      parameters:
        - in: path
          name: hash
          description: Verification Hash
          required: true
          type: string
          example: 373b609f199159befdfsdsd79394df7cba76d9937824ad0b8b30228b6900878ac4832da0dff1682a48099b565dfs6d45
      responses:
        '200':
          description: Verified account successfully
          schema:
            # a pointer to a definition
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Account verified'
        '401':
          description: Verification token not found
            description: Unexpected Error
  /api/auth/facebook:
    # social user login
    get:
      description: Returns user data from facebook
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              user:
                username: 'String'
                email: 'abc@XZY.com'
                bio: 'problem solver'
                token: '....'
                image: '....jpg'
        '404':
          description: Route not found
          default: Can't sign in
  /api/auth/google:
    # social user login
    get:
      description: Returns user data from google
      responses:
        '200':
          description: Success
          schema:
            # a pointer to a definition
            type: object
            properties:
              error:
                type: 'Object'
                example: 'Verification token not found'
  /api/auth/twitter:
    # binds a127 app logic to a route
    get:
      description: Login with Twitter
      responses:
        '200':
          description: Redirects to twitter
  /api/auth/twitter/callback:
    # binds a127 app logic to a route
    get:
      description: Login with Twitter Callback
      responses:
        '200':
          description: Returns an object with data from twitter
  /api/auth/github:
    # binds a127 app logic to a route
    get:
      description: Login with Github
      responses:
        '200':
          description: Redirects to Github
  /api/auth/github/callback:
    # binds a127 app logic to a route
    get:
      description: Login with Github Callback
      responses:
        '200':
          description: Returns an object with data from Github
              username: 'String'
              emial: 'abc@XZY.com'
              bio: 'problem solver'
              token: '....'
              image: '....jpg'
        '404':
          description: Route not found
            # responses may fall through to errors
  /api/auth/forgetpassword:
    # social user login
    post:
      description: Returns emailed link
      parameters:
        email: 'abc@XYZ.com'
      responses:
        '200':
          description: Success
          schema:
            # a pointer to a definition
            type: emails the link
            properties:
              user:
                message: 'String'
                emial: 'abc@XZY.com'
        '404':
          description: Email not found
          # responses may fall through to errors
          default:
            description: Can not found URL
  /api/auth/resetpassword:
    # social user login
    put:
      description: Returns 1 on success or 0
      responses:
        '201':
          description: Success
          schema:
            # a pointer to a definition
            type: object
            properties:
              user:
                username: 'String'
                emial: 'abc@XZY.com'
                bio: 'problem solver'
                token: '....'
                image: '....jpg'
        '400':
          description: invalid token
          # responses may fall through to errors
        '201':
          description: 1
          # responses may fall through to errors
          default:
            description: Can not found URL
  /api/articles/{slug}/comments:
    # binds a127 app logic to a route
    post:
      description: Adding new comment on article
      produces:
        - application/json
      parameters:
        - in: path
          name: slug
          description: Slug identifies an article
          required: true
          type: string
          example: how-to-cook-2dc4b2
        - name: New comment
          in: body
          required: true
          description: The comment object to be created
          schema:
            type: object
            properties:
              comment:
                type: 'Object'
                example: '{"body": "His name was my name too."}'
                properties:
                  body:
                    type: 'String'
                    example: 'His name was my name too.'
      responses:
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article not found'
        '400':
          description: No comment provided
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Provide comment'
        '201':
          description: Comment added
          schema:
            type: object
            properties:
              message:
                type: 'Object'
        '401':
          description: No access token provided
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'No token was provided'
        '403':
          description: Provided token is invalid
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'The token you provided is invalid'
  /api/articles/{articleslug}/comments:
    # binds a127 app logic to a route
    get:
      description: Lists comments of an article
      produces:
        - application/json
      parameters:
        - in: path
          name: articleslug
          description: Slug identifies an article
          required: true
          type: string
          example: how-to-cook-2dc4b2
      responses:
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article not found'
        '200':
          description: Listing comments
          schema:
            type: object
            properties:
              comment:
                type: 'Array'
              commentsCount:
                type: 'String'
        '401':
          description: No access token provided
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'No token was provided'
        '403':
          description: Provided token is invalid
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'The token you provided is invalid'
  /api/articles/{article-slug}/comments/{comment-id}:
    # binds a127 app logic to a route
    put:
      description: Update a comment on article
      produces:
        - application/json
      parameters:
        - in: path
          name: article-slug
          description: Slug identifies an article
          required: true
          type: string
          example: how-to-cook-2dc4b2
        - in: path
          name: comment-id
          description: Comment identifier
          required: true
          type: integer
          example: 1
        - name: comment
          in: body
          required: true
          description: The comment object to be updated
          schema:
            type: object
            properties:
              comment:
                type: 'Object'
                example: '{"body": "His name was my name too."}'
                properties:
                  body:
                    type: 'String'
                    example: 'His name was my name too.'
      responses:
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article not found'
        '400':
          description: No comment provided
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Provide comment'
        '200':
          description: Comment updated
          schema:
            type: object
            properties:
              message:
                type: 'Object'
        '401':
          description: No access token provided
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'No token was provided'
        '403':
          description: Provided token is invalid
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'The token you provided is invalid'
  /api/articles/{artslug}/comments/{id}:
    # binds a127 app logic to a route
    delete:
      description: Deleting a comment on article
      produces:
        - application/json
      parameters:
        - in: path
          name: artslug
          description: Slug identifies an article
          required: true
          type: string
          example: how-to-cook-2dc4b2
        - in: path
          name: id
          description: Comment identifier
          required: true
          type: integer
          example: 1
        - name: comment
          in: body
          required: true
          description: The comment object to be updated
          schema:
            type: object
            properties:
              comment:
                type: 'Object'
                example: '{"body": "His name was my name too."}'
                properties:
                  body:
                    type: 'String'
                    example: 'His name was my name too.'
      responses:
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article not found'
        '400':
          description: Not allowed to delete comment
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'You are allowed to delete comment'
        '200':
          description: Comment deleted
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Comment deleted'
        '401':
          description: No access token provided
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'No token was provided'
        '403':
          description: Provided token is invalid
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'The token you provided is invalid'
  /api/articles/{articlelug}/comments/popular:
    # binds a127 app logic to a route
    get:
      description: Lists comments of an article sorted by popularity
      produces:
        - application/json
      parameters:
        - in: path
          name: articlelug
          description: Slug identifies an article
          required: true
          type: string
          example: how-to-cook-2dc4b2
      responses:
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article not found'
        '200':
          description: Listing comments by popularity
          schema:
            type: object
            properties:
              comment:
                type: 'Array'
              commentsCount:
                type: 'String'
        '401':
          description: No access token provided
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'No token was provided'
        '403':
          description: Provided token is invalid
          schema:
            type: object
            properties:
              error:
                type: 'String'
                example: 'The token you provided is invalid'
  /api/articles/{artslug}/comments/{id}/like:
    # binds a127 app logic to a route
    post:
      description: Like /Unlike a comment on article
      produces:
        - application/json
      parameters:
        - in: path
          name: artslug
          description: Slug identifies an article
          required: true
          type: string
          example: how-to-cook-2dc4b2
        - in: path
          name: id
          description: Comment identifier
          required: true
          type: integer
          example: 1
      responses:
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article not found'
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article comment not found'
        '200':
          description: Comment like
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Comment liked'
        '200':
          description: Comment unlike
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Comment unliked'
        '400':
          description: No access token provided
          schema:
            type: object
            properties:
              error:
                type: 'Object'
  /api/articles/{artslug}/comments/{id}/history:
    # binds a127 app logic to a route
    get:
      description: List edit history of a comment
      produces:
        - application/json
      parameters:
        - in: path
          name: artslug
          description: Slug identifies an article
          required: true
          type: string
          example: how-to-cook-2dc4b2
        - in: path
          name: id
          description: Comment identifier
          required: true
          type: integer
          example: 1
      responses:
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article not found'
        '404':
          description: Article not found
          schema:
            type: object
            properties:
              message:
                type: 'Object'
                example: 'Article comment not found'
        '200':
          description: Listing edit history of comments
          schema:
            type: object
            properties:
              commenthistory:
                type: 'Array'
              count:
                type: 'String'
        '400':
          description: No access token provided
          schema:
            type: object
            properties:
              error:
                type: 'Object'